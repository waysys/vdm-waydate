-- ----------------------------------------------------------------------------
--
-- Types - specification of basic types
-- Author: William Shaffer (wshaffer@waysysweb.com)
-- Date:   23 Aug 2024
--
-- This module specifies basic types and constants for WayDate.
-- ----------------------------------------------------------------------------

module DateTypes

exports
    values
        MaxYear : nat1;
        MinYear : nat1;
 
        FirstDay : nat1;
        LastDay : nat1;

        -- Months
        January : nat1;
        February : nat1;
        March : nat1;
        April : nat1;
        May : nat1;
        June : nat1;
        July : nat1;
        August : nat1;
        September : nat1;
        October : nat1;
        November : nat1;
        December : nat1;

    functions
        -- Validations
        isMonth: nat1 -> bool;
        isYear: nat1 -> bool;
        isDay: nat1 * nat1 * nat1 -> bool;

        -- Data Providers
        isLeapYear: nat1 -> bool;
        daysInMonth: nat1 * nat1 -> nat1;
        daysInYear: nat1 -> nat1;

definitions

-- ----------------------------------------------------------------------------
types
-- ----------------------------------------------------------------------------

DaysPerMonth = map  nat1 to nat1;

-- ----------------------------------------------------------------------------
values
-- ----------------------------------------------------------------------------

-- MaxYear is the largest year handled by WayDate.
MaxYear : nat1 = 3999;

-- MinYear is the minimum year handled by WayDate. Since the Gregorian
-- calendar did not begin until 1582, there seems little point in using this
-- class for dates prior to 1582. 1601 is a convenient year for the epoch.
MinYear : nat1 = 1601;

-- Months
January : nat1 = 1;
February : nat1 = 2;
March : nat1 = 3;
April : nat1 = 4;
May : nat1 = 5;
June : nat1 = 6;
July : nat1 = 7;
August : nat1 = 8;
September : nat1 = 9;
October : nat1 = 10;
November : nat1 = 11;
December : nat1 = 12;

-- FirstDay is the first day of the month
FirstDay : nat1 = 1;

-- LastDay is the last day of December
LastDay  : nat1 = 31;

-- daysPerMonth is the number of days in each month in a non-leap year.
daysPerMonth : DaysPerMonth = {
    1  |-> 31, 
    2  |-> 28,
    3  |-> 31,
    4  |-> 30,
    5  |-> 31,
    6  |-> 30,
    7  |-> 31,
    8  |-> 31,
    9  |-> 30,
    10 |-> 31,
    11 |-> 30,
    12 |-> 31
};

-- ----------------------------------------------------------------------------
functions
-- ----------------------------------------------------------------------------

-- ----------------------------------------------------------------------------
-- Validation Functions --
-- ----------------------------------------------------------------------------

-- isMonth returns true if the month is a valid month.month. 
isMonth: nat1 -> bool
isMonth(month) ==
    if month < 1 or month > 12 then false
    else true;

-- isYear returns true if the year is a valid year
isYear: nat1 -> bool
isYear(year) == 
    if year < MinYear or year > MaxYear then false 
    else true;

-- isDay returns true if day is a valid day given the specified month and year.
isDay: nat1 * nat1 * nat1 -> bool
isDay(month, day, year) ==
    if day > daysInMonth(month, year) then false
    else if day < 1 then false
    else true
pre isMonth(month) and isYear(year);
    
-- ----------------------------------------------------------------------------
-- Data providers 
-- ----------------------------------------------------------------------------

-- isLeapYear returns true if the year is a leap year.
isLeapYear: nat1 -> bool
isLeapYear(year) ==
    if year mod 400 = 0 then true
    elseif year mod 100 = 0 then false 
    elseif year mod 4 = 0 then true 
    else false;

-- daysInMonth return the number of days in the specified month and year.
daysInMonth: nat1 * nat1 -> nat1
daysInMonth(month, year) ==
    if isLeapYear(year) and (month = 2) then daysPerMonth(2) + 1
    else daysPerMonth(month);

-- daysInYear returns the number of days in the specified year.
daysInYear: nat1 -> nat1
daysInYear(year) ==
    if isLeapYear(year) then 366
    else 365;    

end DateTypes