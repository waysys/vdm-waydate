-- ----------------------------------------------------------------------------
--
-- Week - a module to handle weeks and week days.
-- Author: William Shaffer (wshaffer@waysysweb.com)
-- Date: 19 Nov 2023
--
-- Week module defines a union type for the days of the week
-- and calculations to determine the day of the week from a date.
-- 
-- ----------------------------------------------------------------------------

module Week

imports 
    from Date 
        types
            Date renamed Date;

        functions
            convertToAbsoluteDate: Date -> AbsoluteDate,

    from AbsoluteDate
        types
            AbsoluteDate renamed AbsoluteDate;

        functions
            -- conversions
            absoluteDateToNat: AbsoluteDate -> nat1;

    exports
        types
            DayOfWeek;

        values
            Sunday: DayOfWeek;
            Monday: DayOfWeek;
            Tuesday: DayOfWeek;
            Wednesday: DayOfWeek;
            Thursday: DayOfWeek;
            Friday: DayOfWeek;
            Saturday: DayOfWeek;

        functions
            dayOfWeek: Date -> DayOfWeek; 
            weekDay: nat -> DayOfWeek;
            dayOfWeekToWeekDayNumber: DayOfWeek -> nat;

definitions

-- ----------------------------------------------------------------------------
types
-- ----------------------------------------------------------------------------

DayOfWeek = <Sunday>
    | <Monday>
    | <Tuesday>
    | <Wednesday>
    | <Thursday>
    | <Friday>
    | <Saturday>;

DaysOfWeek = seq of DayOfWeek;

-- ----------------------------------------------------------------------------
values
-- ----------------------------------------------------------------------------

daysOfWeek : DaysOfWeek = [
    <Sunday>,
    <Monday>,
    <Tuesday>,
    <Wednesday>,
    <Thursday>,
    <Friday>,
    <Saturday>
];

weekDayNumber : map DayOfWeek to nat = {
    <Sunday>    |-> 0,
    <Monday>    |-> 1,
    <Tuesday>   |-> 2,
    <Wednesday> |-> 3,
    <Thursday>  |-> 4,
    <Friday>    |-> 5,
    <Saturday>  |-> 6
};

Sunday : DayOfWeek = <Sunday>;
Monday : DayOfWeek = <Monday>;
Tuesday : DayOfWeek = <Tuesday>;
Wednesday : DayOfWeek = <Wednesday>;
Thursday : DayOfWeek = <Thursday>;
Friday : DayOfWeek = <Friday>;
Saturday : DayOfWeek = <Saturday>;

-- ----------------------------------------------------------------------------
functions
-- ----------------------------------------------------------------------------

-- weekDay returns the enumerated value of the day of the week 
-- based on the numeric day of the week.
weekDay: nat -> DayOfWeek
weekDay(dayNum) ==
    daysOfWeek(dayNum + 1)
pre dayNum >= 0 and dayNum < 7;

-- dayOfWeek returns the day of the week for the specified date.
dayOfWeek: Date -> DayOfWeek 
dayOfWeek(date) ==
    let
        absoluteDate = Date`convertToAbsoluteDate(date),
        index = AbsoluteDate`absoluteDateToNat(absoluteDate) mod 7
    in
        weekDay(index);

-- dayOfWeekToWeekDayNumber returns the numerical week day number
dayOfWeekToWeekDayNumber: DayOfWeek -> nat 
dayOfWeekToWeekDayNumber(dayOfWk) == 
    weekDayNumber(dayOfWk)

end Week