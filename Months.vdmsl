-- ----------------------------------------------------------------------------
--
-- Months - calculations involving months
-- Author: William Shaffer (wshaffer@waysysweb.com)
-- Date:   19 Aug 2024
--
-- This module performs calculations related to months.
-- ----------------------------------------------------------------------------

module Months

imports 
    from Date 
        types
            Date renamed Date;
            Year renamed Year;
            Month renamed Month;
            Day  renamed Day;

        values
            MaxYear : Year;
            MinYear : Year;

        functions
            yearToInt: Year -> nat1 renamed yearToInt;
            intToYear: int -> Year renamed intToYear;
            monthToInt: Month -> nat1 renamed monthToInt;
            intToMonth: int -> Month renamed intToMonth;
            intToDay: int -> Day renamed intToDay;
            dayToInt: Day -> int renamed dayToInt;
            getDay: Date -> Day renamed getDay;
            daysInMonth: Month * Year -> nat1 renamed daysInMonth;
            create: Month * Day * Year -> Date;
            isMonth: Month -> bool renamed isMonth;
            isYear: Year -> bool renamed isYear;

exports
    types
        MonthYear;

    values
        MaxCompletedMonths: int;

    functions 
        addMonths: Date * int -> Date;
        completedMonths: MonthYear-> int

definitions

-- ----------------------------------------------------------------------------
types
-- ----------------------------------------------------------------------------

MonthYear :: month : Month
             year  : Year
inv mk_MonthYear(month, year) == isMonth(month) and isYear(year);

-- ----------------------------------------------------------------------------
values
-- ----------------------------------------------------------------------------

-- MinYear is the nat1 value of MinYear in date
MinYear = yearToInt(Date`MinYear);

-- MaxYear is the nat1 value of MaxYear in date
MaxYear = yearToInt(Date`MaxYear);

-- MaxMonths is the maximum number of months that can be represented in a date.
-- It is the number of months of MaxDate.
MaxCompletedMonths = 12 * (MaxYear - MinYear) + 11

-- ----------------------------------------------------------------------------
functions
-- ----------------------------------------------------------------------------

-- ----------------------------------------------------------------------------
-- validation functions
-- ----------------------------------------------------------------------------

-- isMonthYear returns true if the MonthYear is valid.
isMonthYear: MonthYear -> bool
isMonthYear(monthYear) ==
    isMonth(monthYear.month) and isYear(monthYear.year);

-- isValidAddMonth returns true if the combination of the date and month
-- is greater or equal to zero and less than or equal MaxCompletedMonths.
isValidAddMonth: Date * int -> bool
isValidAddMonth(date, months) ==
    let
        monthYear = createFromDate(date),
        targetMonths = completedMonths(monthYear) + months
    in
        0 <= targetMonths and targetMonths <= MaxCompletedMonths;      

-- ----------------------------------------------------------------------------
-- constructors
-- ----------------------------------------------------------------------------

-- create creates a MonthYear from the specified month and year;
create: Month * Year -> MonthYear
create(month, year) ==
    mk_MonthYear(month, year)
pre isMonth(month) and isYear(year)
post isMonthYear(RESULT);

-- createFromMonths converts completed months to the equivalent month and year. 
createFromMonths: int -> MonthYear
createFromMonths(months) ==
    let
        year = intToYear(months div 12 + MinYear),
        month = intToMonth(months mod 12 + 1)
    in
        create(month, year)
pre 0 <= months and months <= MaxCompletedMonths
post isMonthYear(RESULT) and completedMonths(RESULT) = months;

-- createFromDate creates a MonthYear based on the month and year of a date. 
createFromDate: Date -> MonthYear
createFromDate(date) ==
    create(date.month, date.year)
post isMonthYear(RESULT) and RESULT.month = date.month and RESULT.year = date.year;

-- ----------------------------------------------------------------------------
-- calculations
-- ----------------------------------------------------------------------------

-- completedMonths returns the number of completed months inherent in the
-- specified MonthYear.
completedMonths: MonthYear -> int 
completedMonths(monthYear) == 
    let
        month = monthToInt(monthYear.month),
        year = yearToInt(monthYear.year)
    in
        12 * (year - MinYear) + (month - 1);

-- daysInMonthYear returns the number of days in a MonthYear. 
daysInMonthYear: MonthYear -> int 
daysInMonthYear(monthYear) ==
    daysInMonth(monthYear.month, monthYear.year);

-- ----------------------------------------------------------------------------
-- day calculations
-- ----------------------------------------------------------------------------

-- minDay returns the minimum of two days
minDay: Day * Day -> Day
minDay(day1, day2) ==
    if dayToInt(day1) > dayToInt(day2) then day2
    else day1;

-- legalDay returns a valid day given a proposed day and the associated month and year.
-- If the proposed day is larger than the last day of the month, the last day of the
-- month is returned.  Otherwise, the proposed day is returned.
legalDay: MonthYear * Day -> Day
legalDay(monthYear, proposedDay) ==
    let
        lastDayOfMonth = intToDay(daysInMonthYear(monthYear))
    in  
        minDay(proposedDay, lastDayOfMonth);

-- addMonth computes a date that the specified months after the date, if the 
-- specified number of months is positive.  If the specified number of months is negative,
-- the computed date is the number of months before the date.
addMonths: Date * int -> Date
addMonths(date, months) == 
    let
        inputMonthYear = createFromDate(date),
        targetMonths = completedMonths(inputMonthYear) + months,
        outputMonthYear = createFromMonths(targetMonths),
        proposedDay = getDay(date),
        day = legalDay(outputMonthYear, proposedDay)
    in
        Date`create(outputMonthYear.month, day, outputMonthYear.year)
    pre isValidAddMonth(date, months)

end Months
