-- ----------------------------------------------------------------------------
--
-- Months - calculations involving months-years
-- Author: William Shaffer (wshaffer@waysysweb.com)
-- Date:   19 Aug 2024
--
-- This module performs calculations related to months.
-- ----------------------------------------------------------------------------

module Months

imports 
    from DateTypes 
        values
            MaxYear : nat1 renamed MaxYear;
            MinYear : nat1 renamed MinYear;
            -- Months
            January : nat1 renamed January;
            December : nat1 renamed December;

        functions
            daysInMonth: nat1 * nat1 -> nat1 renamed daysInMonth;
            isMonth: nat1 -> bool renamed isMonth;
            isYear: nat1 -> bool renamed isYear;
 
exports
    types
        MonthYear;

    values
        MaxCompletedMonths: int;
        MaxMonthYear: MonthYear;
        MinMonthYear: MonthYear;

    functions 
        isMonthYear: MonthYear -> bool;
        completedMonths: MonthYear-> int;
        increment: MonthYear -> MonthYear;
        decrement: MonthYear -> MonthYear;
        create: nat1 * nat1 -> MonthYear;
        createFromMonths: int -> MonthYear;
        daysInMonthYear: MonthYear -> int;
        equals: MonthYear * MonthYear -> bool;
        getMonth: MonthYear -> nat1;
        getYear: MonthYear -> nat1;

    operations
        addMonth: MonthYear * int ==> MonthYear;

definitions

-- ----------------------------------------------------------------------------
types
-- ----------------------------------------------------------------------------

MonthYear :: month : nat1
             year  : nat1
inv mk_MonthYear(month, year) == isMonth(month) and isYear(year);

-- ----------------------------------------------------------------------------
values
-- ----------------------------------------------------------------------------

-- MaxMonths is the maximum number of months that can be represented in a month-year.
-- It is the number of months of MaxDate.
MaxCompletedMonths : nat1 = 12 * (MaxYear - MinYear) + December - 1;

-- MaxMonthYear is the maximum month-year.
MaxMonthYear : MonthYear = create(December, MaxYear);

-- MinMonthYear is the minimum month-year.
MinMonthYear : MonthYear = create(January, MinYear);

-- ----------------------------------------------------------------------------
functions
-- ----------------------------------------------------------------------------

-- ----------------------------------------------------------------------------
-- validation functions
-- ----------------------------------------------------------------------------

-- isMonthYear returns true if the MonthYear is valid.
isMonthYear: MonthYear -> bool
isMonthYear(monthYear) ==
    isMonth(monthYear.month) and isYear(monthYear.year);

-- ----------------------------------------------------------------------------
-- constructors
-- ----------------------------------------------------------------------------

-- create creates a MonthYear from the specified month and year;
create: nat1 * nat1 -> MonthYear
create(month, year) ==
    mk_MonthYear(month, year)
pre isMonth(month) and isYear(year)
post isMonthYear(RESULT);

-- createFromMonths converts completed months to the equivalent month and year. 
createFromMonths: int -> MonthYear
createFromMonths(months) ==
    let
        year = months div 12 + MinYear,
        month = months mod 12 + 1
    in
        create(month, year)
pre 0 <= months and months <= MaxCompletedMonths
post isMonthYear(RESULT) and completedMonths(RESULT) = months;

-- ----------------------------------------------------------------------------
-- properties
-- ----------------------------------------------------------------------------

-- return the month from the month-year
getMonth: MonthYear -> nat1
getMonth(monthYear) == monthYear.month;

-- return the year from the month-year
getYear: MonthYear -> nat1
getYear(monthYear) == monthYear.year;

-- ----------------------------------------------------------------------------
-- calculations
-- ----------------------------------------------------------------------------

-- completedMonths returns the number of completed months inherent in the
-- specified month-year.
completedMonths: MonthYear -> int 
completedMonths(monthYear) == 
    let
        month = monthYear.month,
        year = monthYear.year
    in
        12 * (year - MinYear) + (month - 1);

-- daysInMonthYear returns the number of days in a month-year. 
daysInMonthYear: MonthYear -> int 
daysInMonthYear(monthYear) ==
    daysInMonth(monthYear.month, monthYear.year);

-- equals returns true if the two month years have the same 
-- month and year. 
equals: MonthYear * MonthYear -> bool 
equals(monthYear1, monthYear2) == 
    monthYear1.month = monthYear2.month and monthYear1.year = monthYear2.year;

-- increment increases the month year by one month
increment: MonthYear -> MonthYear
increment(monthYear) == 
    if monthYear.month = December then create(January, monthYear.year + 1)
    else create(monthYear.month + 1, monthYear.year)
pre not equals(MaxMonthYear, monthYear)
post completedMonths(RESULT) = completedMonths(monthYear) + 1;

-- decrement decreases the month year by one month
decrement: MonthYear -> MonthYear
decrement(monthYear) == 
    if monthYear.month = January then create(December, monthYear.year - 1)
    else create(monthYear.month - 1, monthYear.year)
pre not equals(MinMonthYear, monthYear) 
post completedMonths(RESULT) = completedMonths(monthYear) - 1;

-- ----------------------------------------------------------------------------
operations
-- ----------------------------------------------------------------------------

-- addMonth adds a count to the month year.  If the count is negative, the count
-- is subtracted from the month year.
pure addMonth: MonthYear * int ==> MonthYear
addMonth(monthYear, count) == 
    ( dcl result : MonthYear := monthYear,
          index : int := count;
      while index > 0 do (
        result := increment(result);
        index := index - 1;
      );
      while index < 0 do (
        result := decrement(result);
        index := index + 1;
      );
      return result;  
    )
pre 0 <= completedMonths(monthYear) + count and  completedMonths(monthYear) + count <= MaxCompletedMonths
post completedMonths(monthYear) + count = completedMonths(RESULT);

end Months
