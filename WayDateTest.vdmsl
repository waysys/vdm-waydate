-- ----------------------------------------------------------------------------
--
-- DateTest - a module to facilitate tests of Date
-- Author: William Shaffer (wshaffer@waysysweb.com)
-- Date: 19 Nov 2023
--
-- This module helps test the combination of AbsoluteDate and Date
-- ----------------------------------------------------------------------------

module DateTest

imports 
    from DateTypes
        values 
            -- Months
            January : nat1 renamed January;
            February : nat1 renamed February;
            March : nat1 renamed March;
            --April : nat1 renamed April;
            --May : nat1 renamed May;
            --June : nat1 renamed June;
            --July : nat1 renamed July;
            -- August : nat1 renamed August;
            --September : nat1 renamed September;
            October : nat1 renamed October;
            November : nat1 renamed November;
            December : nat1 renamed December,

    from Date 
        types
            Date  renamed Date;

        functions
            createFromDayOfYear: nat1 * nat1 -> Date;
            create: nat1 * nat1 * nat1 -> Date;
            dayOfYear: Date -> nat1;
            maxDate: Date * Date -> Date;
            minDate: Date * Date -> Date;
            after: Date * Date -> bool;
            before: Date * Date -> bool;
            equals: Date * Date -> bool;
            increment: Date -> Date renamed increment;
            decrement: Date -> Date renamed decrement;

        values
            MinDate;
            MaxDate;
 
        operations
            addDay: Date * int ==> Date,

    from AbsoluteDate
        types
            AbsoluteDate renamed AbsoluteDate;

        values
            MaxAbsoluteDate;
            MinAbsoluteDate;

        functions
            -- conversions
            convertToDate: AbsoluteDate -> Date`Date;
            convertToAbsoluteDate: Date`Date -> AbsoluteDate
            natToAbsoluteDate: nat1 -> AbsoluteDate,

    from Week 
        types
            DayOfWeek renamed DayOfWeek;

        functions
            dayOfWeek: Date -> DayOfWeek
            weekDay: nat1 -> DayOfWeek;

exports
    functions
        testDayOfYear: () -> bool;
        testConvertToDate: () -> bool;
        testConvertToAbsoluteDate: () -> bool;
        testDayOfWeek: () -> bool;
        testConvertFromAbsoluteDate: () -> bool;
        testMaxAndMinDate: () -> bool;
        testIncrement: () -> bool;
        testDecrement: () -> bool;
        testAll: () -> bool;

definitions

-- ----------------------------------------------------------------------------
functions
-------------------------------------------------------------------------------

-- Test of Date functions

-- Test of day of year calculations

testDayOfYear: () -> bool
testDayOfYear() ==
    let
        startDate = Date`create(October, 31, 2022),
        dayOfYear = Date`dayOfYear(startDate)
    in
        startDate = Date`createFromDayOfYear(dayOfYear, 2022);

-- Tests of absolute date conversion

-- Example of converting an absolute date 20 to a date (20-Jan-1601)
testConvertToDate: () -> bool
testConvertToDate() ==
    let
        absoluteDate : AbsoluteDate = AbsoluteDate`natToAbsoluteDate(20),
        expectedDate = Date`create(January, 20, 1601)
    in
        AbsoluteDate`convertToDate(absoluteDate) = expectedDate;

-- Test certain facts about absolute date:
--    absolute date of 1-Jan-1601 = 1
--    absolute date of 12-Dec-3999 = 876216
testConvertToAbsoluteDate: () -> bool
testConvertToAbsoluteDate() ==
    let
        maxAbsoluteDate = AbsoluteDate`convertToAbsoluteDate(Date`MaxDate),
        minAbsoluteDate = AbsoluteDate`convertToAbsoluteDate(Date`MinDate)
    in
        (minAbsoluteDate = AbsoluteDate`MinAbsoluteDate) and (maxAbsoluteDate = AbsoluteDate`MaxAbsoluteDate);

-- Test certain facts about dates and absolute dates
--    convertToDate(1) = MinDate
--    convertToDate(MaxAbsoluteDate) = MaxDate
testConvertFromAbsoluteDate: () -> bool
testConvertFromAbsoluteDate() ==
    let
        date1 = AbsoluteDate`convertToDate(AbsoluteDate`MinAbsoluteDate),
        date2 = AbsoluteDate`convertToDate(AbsoluteDate`MaxAbsoluteDate)
    in
        (date1 = Date`MinDate) and (date2 = Date`MaxDate);

-- Test date comparisons

-- Test maxDate and minDate
testMaxAndMinDate: () -> bool
testMaxAndMinDate() ==
    let
        date1 = Date`minDate(Date`MinDate, Date`MaxDate),
        date2 = Date`maxDate(Date`MinDate, Date`MaxDate)
    in 
        (date1 = Date`MinDate) and (date2 = Date`MaxDate) and 
        Date`after(date2, date1) and Date`before(date1, date2);

-- Tests of Week module

testDayOfWeek: () -> bool
testDayOfWeek() ==
    let
        date   = Date`create(November, 21, 2023),
        tuesday = Week`weekDay(2)
    in 
        Week`dayOfWeek(date) = tuesday;  

-- Tests of additions

-- testIncrement tests the three cases for date increment. 
testIncrement: () -> bool 
testIncrement() == 
    let 
        date1 = Date`create(December, 31, 2020), -- end of year
        date1Expected = Date`create(January, 1, 2021), -- beginning of year
        date2 = Date`create(February, 29, 2020), -- end of month not end of year 
        date2Expected = Date`create(March, 1, 2020), -- beginning of month
        date3 = Date`create(February, 28, 2020), -- middle of month
        date3Expected = Date`create(February, 29, 2020) -- also middle of month
    in 
        increment(date1) = date1Expected and 
        increment(date2) = date2Expected and 
        increment(date3) = date3Expected;

-- testDecrement tests the three cases of date decrement.decrement 
testDecrement: () -> bool 
testDecrement() == 
    let
        date1Expected = Date`create(December, 31, 2020), -- end of year
        date1 = Date`create(January, 1, 2021), -- beginning of year
        date2Expected = Date`create(February, 29, 2020), -- end of month not end of year 
        date2 = Date`create(March, 1, 2020), -- beginning of month
        date3Expected = Date`create(February, 28, 2020), -- middle of month
        date3 = Date`create(February, 29, 2020) -- also middle of month
    in 
        decrement(date1) = date1Expected and 
        decrement(date2) = date2Expected and 
        decrement(date3) = date3Expected;


testAddDay: () -> bool
testAddDay() ==
    let 
        baseDate1 = Date`create(February, 29, 2000),
        nextDay = Date`addDay(baseDate1, 1)
     in
        Date`equals(nextDay, Date`create(March, 1, 2000));

-- Summarizations of tests

testAll: () -> bool
testAll() ==
    let
        sumTestDayOfYear = testDayOfYear(),
        sumTestConvertToDate = testConvertToDate(),
        sumTestConvertToAbsoluteDate = testConvertToAbsoluteDate(),
        sumTestConvertFromAbsoluteDate = testConvertFromAbsoluteDate(),
        sumTestMaxAndMinDate = testMaxAndMinDate(),
        sumTestDayOfWeek = testDayOfWeek(),
        sumTestAdd = testAddDay(),
        sumTestIncrement = testIncrement(),
        sumTestDecrement = testDecrement()
    in 
        sumTestDayOfYear and 
        sumTestConvertToDate and
        sumTestConvertToAbsoluteDate and 
        sumTestConvertFromAbsoluteDate and 
        sumTestMaxAndMinDate and 
        sumTestDayOfWeek and
        sumTestAdd and 
        sumTestIncrement and 
        sumTestDecrement;
        
end DateTest