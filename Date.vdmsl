-- ----------------------------------------------------------------------------
--
-- WayDate - date manipulation specification.
-- Author: William Shaffer (wshaffer@waysysweb.com)
-- Date: 17 Nov 2023
--
-- This module provides a specification for date creation and manipulation. 
-- The definitions can be used in proofs of date codes.
-- ----------------------------------------------------------------------------

module Date

imports 
    from MonthYear 
        types 
            MonthYear renamed MonthYear;

        functions
            create: nat1 * nat1 -> MonthYear;
            daysInMonthYear: MonthYear -> nat1 renamed daysInMonthYear; 
            getMonth: MonthYear -> nat1;
            getYear: MonthYear -> nat1;
            isMonthYear: MonthYear -> bool renamed isMonthYear;

        operations 
            addMonth: MonthYear * int ==> MonthYear,

    from DateTypes
        values
            MaxYear : nat1 renamed MaxYear;
            MinYear : nat1 renamed MinYear;
            January : nat1 renamed January;
            December : nat1 renamed December;
            FirstDay : nat1 renamed FirstDay;
            LastDay : nat1 renamed LastDay;

        functions
            -- validations
            isDay : nat1 * nat1 * nat1 -> bool renamed isDay;
            isYear : nat1 -> bool renamed isYear;

            -- data providers
            daysInYear: nat1 -> nat1 renamed daysInYear;
            daysInMonth: nat1 * nat1 -> nat1 renamed daysInMonth;
             
exports types struct Date; Order; 
        functions   
            -- Constructors
            create: nat1 * nat1 * nat1 -> Date;
            createFromDayOfYear: nat1 * nat1 -> Date;

            -- Properties
            getDay: Date -> nat1;
            getMonth: Date -> nat1;
            getYear: Date -> nat1;

            -- Information Functions
            dayOfYear: Date -> nat1;

            -- Comparisons
            compare: Date * Date -> Order;
            equals: Date * Date -> bool;
            after: Date * Date -> bool;
            before: Date * Date -> bool;
            maxDate: Date * Date -> Date;
            minDate: Date * Date -> Date;

            -- Calculations
            increment: Date -> Date;
            decrement: Date -> Date;

        values      MaxDate : Date; MinDate: Date;

        operations  addDay : Date * int ==> Date;
                    difference : Date * Date ==> int;
                    addMonth: Date * int ==> Date;

        -- Relational operators >, >=, =, <=, < can also be used

definitions

-- ----------------------------------------------------------------------------
types
-- ---------------------------------------------------------------------------- 

Date :: month : nat1
        day   : nat1
        year  : nat1
inv mk_Date(month, day, year) == isValidDate(month, day, year)
ord mk_Date(month1, day1, year1) < mk_Date(month2, day2, year2) ==
    year1 < year2 or 
    (year1 = year2 and month1 < month2) or 
    (year1 = year2 and month1 = month2 and day1 < day2);

Order = <Before> | <Equal> | <After>;

-- ----------------------------------------------------------------------------
values
-- ----------------------------------------------------------------------------

-- MaxDate is the largest date handled by WayDate.
MaxDate : Date = create(December, LastDay, MaxYear);

-- MinDate is the smallest date handled by WayDate.
MinDate : Date = create(January, FirstDay, MinYear);

-- ----------------------------------------------------------------------------
functions
-- ----------------------------------------------------------------------------

-- ----------------------------------------------------------------------------
-- Validation Functions --
-- ----------------------------------------------------------------------------

-- isValidDate returns true if the specified month, day, and year 
-- form a valid date.
isValidDate: nat1 * nat1 * nat1 -> bool
isValidDate(month, day, year) == 
    if isDay(month, day, year) then true 
    else false;

-- isDayOfYear returns true if dayOfYear is a valid day of year given the specified
-- year.
isDayOfYear: nat1 * nat1 -> bool
isDayOfYear(dayYear, year) ==
    if dayYear < 1 then false
    else if dayYear > daysInYear(year) then false
    else true
pre isYear(year);

-- ----------------------------------------------------------------------------
-- Data providers 
-- ----------------------------------------------------------------------------

-- dayOfYear comoputes the day of the year for the specified date.  1-Jan-YYYY is day 1.
-- (Definitional)
dayOfYear: Date -> nat1
dayOfYear(date) ==
    let
        firstOfYear = create(January, FirstDay, date.year)
    in
        difference(date, firstOfYear) + 1
    post isDayOfYear(RESULT, date.year);

-- ----------------------------------------------------------------------------
-- Constructors
-- ----------------------------------------------------------------------------

-- create constructs a date given the specified month, day, and year.  The day
-- must be a valid day given the month and year.
create: nat1 * nat1 * nat1 -> Date
create(month, day, year) ==
    mk_Date(month, day, year)
pre isValidDate(month, day, year)
post isValidDate(RESULT.month, RESULT.day, RESULT.year);

-- createFromDayOfYear constructs a date with a day of year equal to the specified
-- day of the year.
createFromDayOfYear: nat1 * nat1 -> Date
createFromDayOfYear(dayYear, year) ==
    addDay(create(January, FirstDay, year), dayYear - 1)
pre isDayOfYear(dayYear, year)
post isValidDate(RESULT.month, RESULT.day, RESULT.year);

-- ----------------------------------------------------------------------------
-- Properties
-- ----------------------------------------------------------------------------

getMonth: Date -> nat1
getMonth(date) == 
    date.month;

getDay: Date -> nat1
getDay(date) ==
    date.day;

getYear: Date -> nat1
getYear(date) ==
    date.year;

-- ----------------------------------------------------------------------------
-- Calulations
-- ----------------------------------------------------------------------------

-- increment adds a day to a date and returns a new date with the result. The MaxDate cannot
-- be incremented. (Definitional)
increment: Date -> Date
increment(date) == 
    let 
        lastDayOfMonth = daysInMonth(date.month, date.year)
    in
        if date.month = December and date.day = lastDayOfMonth then create(January, FirstDay, date.year + 1)
        elseif date.day = lastDayOfMonth then create(date.month + 1, FirstDay, date.year)
        else create(date.month, date.day + 1, date.year)
pre date <> MaxDate
post isValidDate(RESULT.month, RESULT.day, RESULT.year) and date < RESULT;

-- decrement subtracts a day to a date and returns a new date with the result.  The MinDate
-- cannot be decremented.
decrement: Date -> Date
decrement(date) ==
    if date.month = 1 and date.day = 1 then create(12, 31, date.year - 1)
    elseif date.day = 1 then create(date.month - 1, daysInMonth(date.month - 1, date.year), date.year)
    else create(date.month, date.day - 1, date.year)
pre date <> MinDate
post isValidDate(RESULT.month, RESULT.day, RESULT.year) and increment(RESULT) = date;

-- legalDay returns a valid day given a proposed day and the associated month and year.
-- If the proposed day is larger than the last day of the month, the last day of the
-- month is returned.  Otherwise, the proposed day is returned. (Definitional)
legalDay: MonthYear * nat1 -> nat1
legalDay(monthYear, proposedDay) ==
    let
        lastDayOfMonth = daysInMonthYear(monthYear)
    in  
        if proposedDay > lastDayOfMonth then lastDayOfMonth 
        else proposedDay 
pre isMonthYear(monthYear) and 0 < proposedDay and proposedDay <= 31
post isDay(MonthYear`getMonth(monthYear), RESULT, MonthYear`getYear(monthYear));

-- ----------------------------------------------------------------------------
-- Comparison
-- ----------------------------------------------------------------------------

-- compare compares two dates and returns an order type.  If date1 is before date two, compare returns <Before>.
-- If date1 is after date2, compare returns <After>.  If date1 = date2, compare returns <Equal>. (Definitional)
compare: Date * Date -> Order
compare(date1, date2) ==
    if date1.year < date2.year then <Before>
    elseif date1.year = date2.year and date1.month < date2.month then <Before>
    elseif date1.year = date2.year and date1.month = date2.month and date1.day < date2.day then <Before>
    elseif date1.year = date2.year and date1.month = date2.month and date1.day = date2.day then <Equal>
    else <After>;

-- equals returns true if the two dates are the same 
equals: Date * Date -> bool
equals(date1, date2) == 
    compare(date1, date2) = <Equal>;

-- before returns true if date1 is before date2.  Otherwise it returns false.
before: Date * Date -> bool
before(date1, date2) ==
    compare(date1, date2) = <Before>;

-- after returns true if date1 is after date2.  Otherwise it returns false.
after: Date * Date -> bool
after(date1, date2) ==
    compare(date1, date2) = <After>;

-- maxDate returns the later of two dates
maxDate: Date * Date -> Date
maxDate(date1, date2) ==
    if after(date1, date2) then date1
    else date2;

-- minDate returns the earlier of two dates
minDate: Date * Date -> Date
minDate(date1, date2) ==
    if before(date1, date2) then date1
    else date2;

-- ----------------------------------------------------------------------------
operations
-- ----------------------------------------------------------------------------

-- addDay adds a number of days equal to count to a date and returns the result.  Count can be negative, in which
-- case, a number of days equal to count is subtracted from the date.  A positive count cannot be added to
-- MaxDate.  A negative count cannot be subracted from MinDate.
pure addDay: Date * int ==> Date
addDay(date, count) ==
    ( dcl result : Date := date,
          index : int := count;
    while index > 0 do (
        result := increment(result);
        index := index - 1;
    );
    while index < 0 do (
        result := decrement(result);
        index := index + 1
    );
    return result
    );

-- difference returns the number of days between date1 and date2.  If date1 is before date2, the number
-- of days is a negative number.  If date1 is after date2, the number is positive.
pure difference: Date * Date ==> int 
difference(date1, date2) ==
   (dcl diff : int := 0,
        dt1 : Date := date1,
        dt2 : Date := date2;
    while compare(dt1, dt2) = <Before> do (
        diff := diff - 1;
        dt1 := increment(dt1)
    );
    while compare(dt1, dt2) = <After> do (
        diff := diff + 1;
        dt1 := decrement(dt1)
    );
    return diff
   );

-- addMonths returns a date with the specified number of months (count) in the future of the specified
-- date, if count is positive.  If count is negative, the computed date is the specified number of
-- months in the past.
pure addMonth: Date * int ==> Date
addMonth(date, count) == 
    (dcl result : Date := date,
         monthYear: MonthYear := MonthYear`create(date.month, date.year),
         month: nat1,
         day: nat1,
         year: nat1;
    monthYear := MonthYear`addMonth(monthYear, count);
    month := MonthYear`getMonth(monthYear);
    day := legalDay(monthYear, count);
    year := MonthYear`getYear(monthYear);
    result := create(month, day, year);
    return result
    );

end Date