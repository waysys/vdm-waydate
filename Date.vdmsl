-- ----------------------------------------------------------------------------
--
-- WayDate - date manipulation specification.
-- Author: William Shaffer (wshaffer@waysysweb.com)
-- Date: 17 Nov 2023
--
-- This module provides a specification for date creation and manipulation. 
-- The definitions can be used in proofs of date codes.
-- ----------------------------------------------------------------------------

module Date

imports 
    from Year 
        values 
            MaxYear : nat1 renamed MaxYear;
            MinYear : nat1 renamed MinYear,

    from Month
        types
            Month renamed Month;

        values
            January : Month renamed January;
            December : Month renamed December;

        functions
            daysInMonth: Month * nat1 -> nat1 renamed daysInMonth;
            before: Month * Month -> bool;
            priorMonth: Month -> Month renamed priorMonth;
            nextMonth: Month -> Month renamed nextMonth,

    from Day
        values 
            FirstDay: nat1 renamed FirstDay;
            LastDay: nat1 renamed LastDay;

        functions 
            isDay: Month * nat1 * nat1 -> bool renamed isDay,

    from MonthYear 
        types 
            MonthYear renamed MonthYear;

        functions
            create: Month * nat1 -> MonthYear;
            getMonth: MonthYear -> Month;
            getYear: MonthYear -> nat1;
            legalDay: MonthYear * nat1 -> nat1 renamed legalDay;
            addMonth: MonthYear * int -> MonthYear,

    from DayOfYear 
        types 
            DayOfYear renamed DayOfYear;
            MonthDay renamed MonthDay;

        functions
            dayOfYearToMonthDay: DayOfYear * nat1 -> MonthDay renamed dayOfYearToMonthDay; 
            dayOfYearToNat: DayOfYear -> nat1 renamed dayOfYearToNat;
            natToDayOfYear: nat1 -> DayOfYear renamed natToDayOfYear; 
            isDayOfYear: nat1 * nat1 -> bool renamed isDayOfYear,

    from AbsoluteDate
        types AbsoluteDate renamed AbsoluteDate;

        values 
            MinAbsoluteDate renamed MinAbsoluteDate;
            MaxAbsoluteDate renamed MaxAbsoluteDate;

        functions
            yearFromAbsolute: AbsoluteDate -> nat renamed yearFromAbsolute;
            daysInPastYears: nat1 -> nat renamed daysInPastYears;
            natToAbsoluteDate: nat1 -> AbsoluteDate renamed natToAbsoluteDate;
            absoluteDateToNat: AbsoluteDate -> nat1 renamed absoluteDateToNat;        

exports types struct Date; Order; 
        functions   
            -- Constructors
            create: Month * nat1 * nat1 -> Date;
            createFromDayOfYear: DayOfYear * nat1 -> Date;
            createFromAbsoluteDate: AbsoluteDate -> Date;

            -- Properties
            getDay: Date -> nat1;
            getMonth: Date -> Month;
            getYear: Date -> nat1;

            -- Information Functions
            dayOfYear: Date -> nat1;

            -- Comparisons
            compare: Date * Date -> Order;
            equals: Date * Date -> bool;
            after: Date * Date -> bool;
            before: Date * Date -> bool;
            maxDate: Date * Date -> Date;
            minDate: Date * Date -> Date;

            -- Calculations
            increment: Date -> Date;
            decrement: Date -> Date;
            convertToAbsoluteDate: Date -> AbsoluteDate;
            addDay : Date * int -> Date;
            addWeek: Date * int -> Date;
            addMonth: Date * int -> Date;
            difference : Date * Date -> int;

        values      
            MaxDate : Date; MinDate: Date;

        -- Relational operators >, >=, =, <=, < can also be used

definitions

-- ----------------------------------------------------------------------------
types
-- ---------------------------------------------------------------------------- 

Date :: month : Month
        day   : nat1
        year  : nat1
inv mk_Date(month, day, year) == isValidDate(month, day, year)
ord mk_Date(month1, day1, year1) < mk_Date(month2, day2, year2) ==
    year1 < year2 or 
    (year1 = year2 and Month`before(month1, month2)) or 
    (year1 = year2 and month1 = month2 and day1 < day2);

Order = <Before> | <Equal> | <After>;

-- ----------------------------------------------------------------------------
values
-- ----------------------------------------------------------------------------

-- MaxDate is the largest date handled by WayDate.
MaxDate : Date = create(December, LastDay, MaxYear);

-- MinDate is the smallest date handled by WayDate.
MinDate : Date = create(January, FirstDay, MinYear);

-- ----------------------------------------------------------------------------
functions
-- ----------------------------------------------------------------------------

-- ----------------------------------------------------------------------------
-- Validation Functions --
-- ----------------------------------------------------------------------------

-- isValidDate returns true if the specified month, day, and year 
-- form a valid date.
isValidDate: Month * nat1 * nat1 -> bool
isValidDate(month, day, year) == 
    if isDay(month, day, year) then true 
    else false;

-- ----------------------------------------------------------------------------
-- Data providers 
-- ----------------------------------------------------------------------------

-- dayOfYear comoputes the day of the year for the specified date.  1-Jan-YYYY is day 1.  
-- (Definitional)
dayOfYear: Date -> nat1
dayOfYear(date) ==
    let 
        finalMonth = getMonth(date),
        day = getDay(date),
        year = getYear(date),
        daysMonths = daysInMonths(January, finalMonth, year, 0)
    in 
        daysMonths + day
    post isDayOfYear(RESULT, date.year);

-- daysInMonths computes total days in all the months up to and including
-- the specified months.
daysInMonths: Month * Month * nat1 * nat -> nat
daysInMonths(currentMonth, finalMonth, year, initialDays) == 
    if currentMonth = finalMonth then initialDays 

    else 
        let 
            days = initialDays + daysInMonth(currentMonth, year),
            nxtMonth = nextMonth(currentMonth)
        in 
            daysInMonths(nxtMonth, finalMonth, year, days)
    measure is not yet specified;

-- ----------------------------------------------------------------------------
-- Constructors
-- ----------------------------------------------------------------------------

-- create constructs a date given the specified month, day, and year.  The day
-- must be a valid day given the month and year.
create: Month * nat1 * nat1 -> Date
create(month, day, year) ==
    mk_Date(month, day, year)
pre isValidDate(month, day, year)
post isValidDate(RESULT.month, RESULT.day, RESULT.year);

-- createFromDayOfYear constructs a date with a day of year equal to the specified
-- day of the year.
createFromDayOfYear: DayOfYear * nat1 -> Date
createFromDayOfYear(dayYear, year) == 
    let 
        monthDay = dayOfYearToMonthDay(dayYear, year)
    in  
        create(monthDay.month, monthDay.day, year)
pre isDayOfYear(dayOfYearToNat(dayYear), year)
post isValidDate(RESULT.month, RESULT.day, RESULT.year);

-- 
-- createFromAbsoluteDate returns a date corresponding to the specified
-- absolute date
createFromAbsoluteDate: AbsoluteDate -> Date
createFromAbsoluteDate(absoluteDate) ==
    let
        year  = yearFromAbsolute(absoluteDate),
        dayYear = absoluteDateToNat(absoluteDate) - daysInPastYears(year)
    in 
        createFromDayOfYear(natToDayOfYear(dayYear), year);

-- ----------------------------------------------------------------------------
-- Properties
-- ----------------------------------------------------------------------------

getMonth: Date -> Month
getMonth(date) == 
    date.month;

getDay: Date -> nat1
getDay(date) ==
    date.day;

getYear: Date -> nat1
getYear(date) ==
    date.year;

-- ----------------------------------------------------------------------------
-- Calulations
-- ----------------------------------------------------------------------------

-- increment adds a day to a date and returns a new date with the result. The MaxDate cannot
-- be incremented. (Definitional)
increment: Date -> Date
increment(date) == 
    let 
        lastDayOfMonth = daysInMonth(date.month, date.year),
        nextMnth = nextMonth(date.month)
    in
        if date.month = December and date.day = lastDayOfMonth then create(January, FirstDay, date.year + 1)
        elseif date.day = lastDayOfMonth then create(nextMnth, FirstDay, date.year)
        else create(date.month, date.day + 1, date.year)
pre date <> MaxDate
post isValidDate(RESULT.month, RESULT.day, RESULT.year) and date < RESULT;

-- decrement subtracts a day to a date and returns a new date with the result.  The MinDate
-- cannot be decremented.
decrement: Date -> Date
decrement(date) ==
    let 
        priorMnth = priorMonth(date.month),
        lastDayOfMonth = daysInMonth(priorMnth, date.year)
    in 
        if date.month = January and date.day = 1 then create(December, 31, date.year - 1)
        elseif date.day = 1 then create(priorMnth, lastDayOfMonth, date.year)
        else create(date.month, date.day - 1, date.year)
pre date <> MinDate
post isValidDate(RESULT.month, RESULT.day, RESULT.year) and increment(RESULT) = date;

-- convertToAbsoluteDate returns an absolute date corresponding to the specified
-- date.
convertToAbsoluteDate: Date -> AbsoluteDate
convertToAbsoluteDate(date) ==
    let
        dayYear = dayOfYear(date)
    in
        natToAbsoluteDate(dayYear + daysInPastYears(getYear(date)))
    measure is not yet specified;

-- addDay adds a number of days equal to count to a date and returns the result.  Count can be negative, in which
-- case, a number of days equal to count is subtracted from the date.  A positive count cannot be added to
-- MaxDate.  A negative count cannot be subracted from MinDate.
addDay: Date * int -> Date 
addDay(date, count) == 
    let 
        absDate = absoluteDateToNat(convertToAbsoluteDate(date)), 
        result = absDate + count
    in 
        if result < absoluteDateToNat(MinAbsoluteDate) then undefined 
        elseif result > absoluteDateToNat(MaxAbsoluteDate) then undefined 
        else createFromAbsoluteDate(natToAbsoluteDate(result));

-- addWeek adds a number of weeks to a date and returns the result.  Number of weeks can be
-- negative.  
addWeek: Date * int -> Date 
addWeek(date, numberWeeks) == 
    addDay(date, numberWeeks * 7);

-- addMonth adds a number of months to a date.  The number of months can be negative, in which
-- case, the numbr of months is subtracted from the date. 
addMonth: Date * int -> Date 
addMonth(date, numberMonths) == 
    let 
        monthYearOriginal = MonthYear`create(date.month, date.year),
        monthYear = MonthYear`addMonth(monthYearOriginal, numberMonths),
        month = MonthYear`getMonth(monthYear),
        day = legalDay(monthYear, numberMonths),
        year = MonthYear`getYear(monthYear)
    in  
        create(month, day, year);

-- difference returns the number of days between date1 and date2.  If date1 is before date2, the number
-- of days is a negative number.  If date1 is after date2, the number is positive.
difference: Date * Date -> int 
difference(date1, date2) == 
    let 
        absDate1 = absoluteDateToNat(convertToAbsoluteDate(date1)),
        absDate2 = absoluteDateToNat(convertToAbsoluteDate(date2))
    in 
        absDate1 - absDate2
measure is not yet specified;

-- ----------------------------------------------------------------------------
-- Comparison
-- ----------------------------------------------------------------------------

-- compare compares two dates and returns an order type.  If date1 is before date two, compare returns <Before>.
-- If date1 is after date2, compare returns <After>.  If date1 = date2, compare returns <Equal>. (Definitional)
compare: Date * Date -> Order
compare(date1, date2) ==
    if date1.year < date2.year then <Before>
    elseif date1.year = date2.year and Month`before(date1.month, date2.month) then <Before>
    elseif date1.year = date2.year and date1.month = date2.month and date1.day < date2.day then <Before>
    elseif date1.year = date2.year and date1.month = date2.month and date1.day = date2.day then <Equal>
    else <After>;

-- equals returns true if the two dates are the same 
equals: Date * Date -> bool
equals(date1, date2) == 
    compare(date1, date2) = <Equal>;

-- before returns true if date1 is before date2.  Otherwise it returns false.
before: Date * Date -> bool
before(date1, date2) ==
    compare(date1, date2) = <Before>;

-- after returns true if date1 is after date2.  Otherwise it returns false.
after: Date * Date -> bool
after(date1, date2) ==
    compare(date1, date2) = <After>;

-- maxDate returns the later of two dates
maxDate: Date * Date -> Date
maxDate(date1, date2) ==
    if after(date1, date2) then date1
    else date2;

-- minDate returns the earlier of two dates
minDate: Date * Date -> Date
minDate(date1, date2) ==
    if before(date1, date2) then date1
    else date2;

end Date